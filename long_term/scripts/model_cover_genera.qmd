---
title: "Model change per genera"
format: html
editor: visual
---

## Libraries & Functions

```{r}
library(tidyverse)
library(here)
library(RColorBrewer)
library(brms)
library(tidybayes)
library(patchwork)
library(bayesplot)
library(ggragged)
library(ggridges)

# check how much of distribution is above 0
above_0 <- function(x){
  length(which(x > 0))/length(x)
}

#get summary
brms_summary <- function(x) {
      posterior::summarise_draws(x, "mean", "sd",  ~quantile(.x, probs = c(0.025, 0.975)))
    }


#make colours less intense
make_pastel <- function(cols, n = 0.4){
  names <- names(cols)
  cols <- col2rgb(cols)
  # transform to HSV space
  cols <- rgb2hsv(cols)
  cols <- hsv(cols[1,], cols[2,]*n, cols[3,])
  names(cols) <- names
  return(cols)
}

# theme for ggplots
theme_andi <- function(){
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(), 
        strip.background = element_blank(),
        axis.line = element_line(colour = "black" ))
}



# predict data from model to calculate difference in coral cover between two years
predict_before_after <- function(.model, .data, .get_summary = FALSE, ...){ 
  
  # Get a list of quoted dots
  group_vars <- enquos(...)  
  
  # get years 
  years <-  .data$year %>% unique()
  
  # check if only 2 year in data
  if(length(years) != 2){stop(paste("Only two years allowed but", length(years != 2), "provided"))}
  
  
  year_1 <- sym(as.character(years[1]))
  year_2 <- sym(as.character(years[2]))
  
  #make new df
  new_data <- .data %>% 
  dplyr::select(!!!group_vars, year) %>% 
  distinct() %>% 
  mutate(row = 1:n())

  # predict data

  post_pred <- fitted(.model,
                      newdata = new_data,
                      summary = F) %>%
    # convert the results to a data frame
    data.frame() %>%
    # rename the columns
    set_names(pull(new_data, row)) %>%
    # add a numeric index for the MCMC draws
    mutate(draw = 1:n()) %>%
    # convert to the long format
    pivot_longer(-draw) %>%
    # convert the row column from the character format to the numeric format
    mutate(row = as.double(name)) %>%
    # join the nd predictor grid to the output
    left_join(new_data, by = "row") %>%
    # drop two of the columns which are now unnecessary
     select(-name, -row) %>%
    # convert to a wider format so we can compute the contrast
    pivot_wider(names_from = year, values_from = value) %>%
    # compute the ATE contrast
     mutate(tau = !!year_2 - !!year_1) %>%
    # # compute the average ATE value within each MCMC draw
      group_by(draw, !!!group_vars) %>%
    summarise(ate = mean(tau)) %>%
    # # remove the draw index column
     ungroup() %>%
     select(ate, !!!group_vars)
  
  if(.get_summary){
    
    post_pred <- post_pred %>%
      group_by(!!!group_vars) %>%
      brms_summary()
  }

  return(post_pred)

}
```

## Get data

```{r}
dat <- readRDS(here("long_term/data/clean/clean_MooreaMPA.rds"))
dat_meta <- read.csv(here("long_term/data/clean/moorea_mpa_site_metadata.csv"))
```

-   only outer slope, after 2018

```{r}
dat_c <- dat %>% 
  filter(benthic_group == "coral", habitat == "Outer slope", year > 2018)
```

top 5 corals after 2018

```{r}
top_5_corals <- dat_c %>% 
  filter(proportion > 0) %>% 
  group_by(substrate) %>% 
  summarise(n_total = n()) %>% 
  arrange(-n_total) %>% 
  slice(1:5) %>% 
  pull(substrate)

top_5_corals
```

dump into others, re-calculate cover

```{r}
dat_c <- dat_c %>% 
    left_join(dat_meta, by = "marine_area") %>% 
  mutate(genus = ifelse(substrate %in% top_5_corals, substrate, "Other")) %>% 
  select(-substrate) %>% 
  group_by(across(c(-proportion))) %>% 
  summarise(proportion = sum(proportion, na.rm = T)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = genus, values_from = proportion, values_fill = 0) %>% 
  select(-benthic_group, -habitat) %>% 
  pivot_longer(cols = 10:ncol(.),names_to = "genus", values_to = "proportion") %>% 
  mutate(genus = fct_relevel(genus, "Other", after = Inf)) #set others to end
```

Plot to see what model will do

```{r}


cols_genera <- c(brewer.pal(11, "Set3")[c(1,3,5:7)], "grey70")#last = "Other" to white
names(cols_genera) <- c(top_5_corals, "Other")

plot_coral_cover <- dat_c %>% 
  group_by(across(c(-proportion, -transect))) %>%  
  summarise(cover_perc = mean(proportion*100, na.rm = T)) %>% 
  ungroup() %>% 
   mutate(coast = factor(coast, levels = c("West", "North", "East"))) %>% 
  ggplot()+
  geom_area(aes(fill = genus, x = as.Date(date), y = cover_perc))+
  scale_fill_manual(values = cols_genera)+
  guides(fill=guide_legend(title="Genus"))+
  geom_vline(aes(xintercept = as.Date(date)), col = "white", linewidth = 0.1)+
  scale_x_date(breaks = "2 years", date_labels = "%y")+
  labs(x = "Year", y = "Benthic cover (%)")+
  facet_ragged_cols(vars(marine_area), vars(coast))+
  theme_minimal()+
  theme(legend.position = "bottom", 
        axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.ticks = element_line(colour = "black", size = 0.2),
        panel.border = element_rect(fill=NA));plot_coral_cover
```

## Model Delta

### Get data

Check always 3 reps

```{r}
dat_c %>% 
  group_by(marine_area, year, genus) %>% 
  summarise(n = n()) %>% 
  filter(n!=3)
#all good
```

Get DHW data at to data. Names of sites differ and needs to be aligned

```{r}
dat_genus_delta <- dat_c 

dat_dhw <- read.csv(here("dhw/data/dat_sites_maxdhw_mur.csv"))


sites_1 <- unique(dat_genus_delta$marine_area)
sites_2 <- unique(dat_dhw$site)

sites_1[which(!sites_1 %in% sites_2)]
sites_2[which(!sites_2 %in% sites_1)]

# rename dat_coral_delta sites

dat_genus_delta <- dat_genus_delta %>% 
  mutate(marine_area = case_when(marine_area == "Entre 2 baies" ~  "Entre 2 baies",
                                 marine_area == "Haapiti" ~  "Ha'apiti",
                                 marine_area == "Maatea" ~  "Ma'atea",
                                 marine_area == "Pihaena" ~ "Piha'ena",
                                 marine_area == "Temae" ~ "Tema'e",
                          .default = marine_area)) 

dat_dhw <- dat_dhw %>% 
  mutate(site = ifelse(site == "Entre 2 baies", "Entre 2 baies", site ))

dat_genus_delta <- dat_genus_delta %>% 
  select(-coast) %>% 
  left_join(dat_dhw, by = c("marine_area" = "site")) 
```

Check range of proportion (Beta not defined for 1 and 0)

```{r}
dat_genus_delta <- dat_genus_delta %>% 
  mutate(proportion = ifelse(proportion == 0, 0.001, proportion))
```

0 occurs Either transform or use ordered beta regression. Tried ordered beta regression, bad fit, high number of divergent transitions

### Models

```{r}
m_ccover_genus_19 <- brm(bf(proportion ~  genus*marine_area + (0 + factor(year)|marine_area),
                            phi ~  genus + (0 + factor(year)|marine_area)),
                         data = dat_genus_delta %>% 
                           filter(year %in% 2019:2020),
                         family = Beta(),
                         init = 0,
                         iter = 4000,
                         warmup = 2000,
                         control = list(adapt_delta = 0.99, 
                               max_treedepth = 20),
                         chains = 4,
                         cores = 4,
                         threads = threading(2, static = T),
                         seed = 123,
                         file = here("long_term/models/m_ccover_genus_19"),
                         backend = "cmdstanr")

m_ccover_genus_20 <- brm(bf(proportion ~  genus*marine_area + (0 + factor(year)|marine_area),
                            phi ~  genus + (0 + factor(year)|marine_area)),
                         data = dat_genus_delta %>% 
                           filter(year %in% 2020:2021),
                         family = Beta(),
                         init = 0,
                         iter = 4000,
                         warmup = 2000,
                         control = list(adapt_delta = 0.99, 
                               max_treedepth = 20),
                         chains = 4,
                         cores = 4,
                         threads = threading(2, static = T),
                         seed = 123,
                         file = here("long_term/models/m_ccover_genus_20"),
                         backend = "cmdstanr")

m_ccover_genus_21 <- brm(bf(proportion ~  genus*marine_area + (0 + factor(year)|marine_area),
                            phi ~  genus + (0 + factor(year)|marine_area)),
                         data = dat_genus_delta %>% 
                           filter(year %in% 2021:2022),
                         family = Beta(),
                         init = 0,
                         iter = 4000,
                         warmup = 2000,
                         control = list(adapt_delta = 0.99, 
                               max_treedepth = 20),
                         chains = 4,
                         cores = 4,
                         threads = threading(2, static = T),
                         seed = 123,
                         file = here("long_term/models/m_ccover_genus_21"),
                         backend = "cmdstanr")

m_ccover_genus_22 <- brm(bf(proportion ~  genus*marine_area + (0 + factor(year)|marine_area),
                            phi ~  genus + (0 + factor(year)|marine_area)),
                         data = dat_genus_delta %>% 
                           filter(year %in% 2022:2023),
                         family = Beta(),
                         init = 0,
                         iter = 4000,
                         warmup = 2000,
                         control = list(adapt_delta = 0.99, 
                                        max_treedepth = 20),
                         chains = 4,
                         cores = 4,
                         threads = threading(2, static = T),
                         seed = 123,
                         file = here("long_term/models/m_ccover_genus_22"),
                         backend = "cmdstanr")
```

### Check Models

```{r}
summary(m_ccover_genus_19)#20 d trans, rhat, ESS good
summary(m_ccover_genus_20)#5 d trans, rhat, ESS good
summary(m_ccover_genus_21)#42 d trans, rhat good , ESS ok
summary(m_ccover_genus_22)#2 d trans, rhat good, ESS ok
```

```{r}
bayes_R2(m_ccover_genus_19)#.86
bayes_R2(m_ccover_genus_20)#.83
bayes_R2(m_ccover_genus_21)#.8
bayes_R2(m_ccover_genus_22)#.72
```

```{r}
pp_check(m_ccover_genus_19, ndraws = 100)
pp_check(m_ccover_genus_20, ndraws = 100)
pp_check(m_ccover_genus_21, ndraws = 100)
pp_check(m_ccover_genus_22, ndraws = 100)
```

### Predict

Predict data for plots

```{r}
pred_gen_19 <- predict_before_after(.data = dat_genus_delta %>% 
                       filter(year %in% 2019:2020) %>% 
                       droplevels(), 
                     .model = m_ccover_genus_19, 
                     .get_summary = F,
                     marine_area, genus) %>% 
   left_join(dat_dhw, by = c("marine_area" = "site")) %>% 
   mutate(comparison = "2019 - 2020")


pred_gen_20 <- predict_before_after(.data = dat_genus_delta %>% 
                       filter(year %in% 2020:2021) %>% 
                       droplevels(), 
                     .model = m_ccover_genus_20, 
                     .get_summary = F,
                     marine_area, genus) %>% 
   left_join(dat_dhw, by = c("marine_area" = "site")) %>% 
   mutate(comparison = "2020 - 2021")


pred_gen_21 <- predict_before_after(.data = dat_genus_delta %>% 
                       filter(year %in% 2021:2022) %>% 
                       droplevels(), 
                     .model = m_ccover_genus_21, 
                     .get_summary = F,
                     marine_area, genus) %>% 
   left_join(dat_dhw, by = c("marine_area" = "site")) %>% 
   mutate(comparison = "2021 - 2022")


pred_gen_22 <- predict_before_after(.data = dat_genus_delta %>% 
                       filter(year %in% 2022:2023) %>% 
                       droplevels(), 
                     .model = m_ccover_genus_22, 
                     .get_summary = F,
                     marine_area, genus) %>% 
   left_join(dat_dhw, by = c("marine_area" = "site")) %>% 
   mutate(comparison = "2022 - 2023")
```

```{r}
pred_gen <- bind_rows(pred_gen_19,
                  pred_gen_20,
                  pred_gen_21,
                  pred_gen_22) %>% 
    mutate(coast = factor(coast, levels = c("West", "North", "East"))) %>% 
  group_by(coast) %>% 
  mutate(marine_area = fct_reorder(.f = marine_area, .x = ate, .fun = mean, .desc = T)) %>% 
  ungroup()
```

### Plot results

```{r}
plot_change_site_gen <- pred_gen %>%
    ggplot(aes(x = ate*100, y = marine_area, col = genus))+
    stat_pointinterval(position = position_dodge(.5), )+
    geom_vline(xintercept = 0, linetype = "11")+
    facet_wrap(~coast, ncol = 1, scales = "free_y")+
    labs( x = expression(Delta~"Cover (%"~yr^-1*")"), y = NULL)+
    scale_colour_manual(values = cols_genera, name = NULL)+
    theme_minimal()+
  facet_grid(coast~comparison, scales = "free")+
    theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(colour = "black",  fill='transparent'),
        plot.title = element_text(hjust = 0.5, face="bold"),
        strip.text = element_text(face="bold"),
        legend.position = "bottom")

plot_change_site_gen


ggsave(filename = "plot_change_site_gen.pdf",
       plot = plot_change_site_gen, 
       path = here("long_term/plots/"),
       width = 25, height = 20, units  = "cm")
```

## DHW in 2019

### Model

```{r}
m_ccover_genus_19_dhw <- brm(bf(proportion ~ 0 + max_dhw_29 * genus * factor(year) + 
                              (0 + factor(year)|marine_area),
                            phi ~  genus + (0 + factor(year)|marine_area)),
                         data = dat_genus_delta %>% 
                           filter(year %in% 2019:2020),
                         family = Beta(),
                         init = 0,
                         iter = 4000,
                         warmup = 2000,
                         control = list(adapt_delta = 0.99,
                                        max_treedepth = 15),
                         chains = 4,
                         cores = 4,
                         threads = threading(2, static = T),
                         seed = 123,
                         file = here("long_term/models/m_ccover_genus_19_dhw"),
                         backend = "cmdstanr")
```

### Checks

```{r}
summary(m_ccover_genus_19_dhw)#no div trans
pp_check(m_ccover_genus_19_dhw, ndraws = 100)
bayes_R2(m_ccover_genus_19_dhw)#0.8
```

### Line plot

Predict delta for each genus along sequence of max_DHW values

```{r}
new_data_dhw_gen <- expand_grid(max_dhw_29 = seq(min(dat_genus_delta$max_dhw_29)-0.1, 
                                     max(dat_genus_delta$max_dhw_29)+0.1, 
                                     length = 100),
                            genus = unique(dat_genus_delta$genus),
                            year = 2019:2020)

pred_dhw_gen <-  epred_draws(m_ccover_genus_19_dhw,
                             newdata = new_data_dhw_gen,
                             re_formula = NA) %>%
  ungroup() %>%
  select(max_dhw_29, .draw, .epred, year, genus) %>%
  pivot_wider(names_from = year, values_from = .epred) %>%
  mutate(delta = (`2020` - `2019`))


pred_dhw_genS <- pred_dhw_gen %>% 
  group_by(max_dhw_29, genus) %>% 
  summarise(median = median(delta, na.rm = T),
            l95 = quantile(delta, 0.025, na.rm = T),
            u95 = quantile(delta, 0.975, na.rm = T),
            
            l80 = quantile(delta, 0.1, na.rm = T),
            u80 = quantile(delta, 0.9, na.rm = T),
            
            l60 = quantile(delta, 0.2, na.rm = T),
            u60 = quantile(delta, 0.8, na.rm = T)) %>% 
  ungroup()

dat_genus_deltaS <- dat_genus_delta %>% 
  select(marine_area, proportion, year, coast, max_dhw_29, genus) %>% 
  filter(year %in% c(2019:2020)) %>% 
  pivot_wider(names_from = year, values_from = proportion, values_fn = mean) %>% 
  mutate(delta =  `2020`- `2019`)  
  


plot_dhw <- pred_dhw_genS %>%
  ggplot(aes(x = max_dhw_29))+
  geom_hline(yintercept = 0, linetype = "11", col = "grey")+
  geom_ribbon(aes(ymin = l95, ymax = u95, fill = genus), alpha = .3)+
   geom_ribbon(aes(ymin = l80, ymax = u80, fill = genus), alpha = .3)+
   geom_ribbon(aes(ymin = l60, ymax = u60, fill = genus), alpha = .3)+
  geom_line(aes(y = median, col = genus), linewidth = 1, show.legend = F)+
  geom_point(data = dat_genus_deltaS, aes(x = max_dhw_29, y = delta, fill = genus), 
             size = 2.5, shape = 21, col = "white", show.legend = F)+
  scale_colour_manual(values = cols_genera, name = NULL)+
  scale_fill_manual(values = cols_genera, name = NULL)+
  labs(y = expression(Delta~"Cover (%"~yr^-1*")"), x = "max. DHW")+
  guides(fill=guide_legend(title="Coast"))+
  theme_andi()+
  theme(legend.position = "bottom",
        plot.title = element_text(face = "bold", hjust = 0.5))


plot_dhw

ggsave(filename = "cover_regression_dhw_genus.pdf",
       plot = plot_dhw, 
       path = here("long_term/plots/"),
       width = 15, height = 10, units  = "cm")
```

### Slope

Assuming linear relationship over whole course of max_DHW calculate slope between lowest max_DHW value and highest. Calculate this slope for each genus

```{r}
slope_gen <- epred_draws(m_ccover_genus_19_dhw, 
                         re_formula = NA,
                         newdata = 
  expand_grid(max_dhw_29 = c(min(dat_genus_delta$max_dhw_29),
                             max(dat_genus_delta$max_dhw_29)),
              year = 2019:2020,
              genus = dat_genus_delta$genus %>% unique())) %>% 
  ungroup() %>% 
  select(max_dhw_29, year, .epred, .draw, genus) %>% 
  pivot_wider(names_from = year, values_from = .epred) %>% 
  mutate(delta =  `2020`- `2019`) %>% 
  select(delta, max_dhw_29, .draw, genus) %>% 
  pivot_wider(names_from = max_dhw_29, values_from = delta) %>% 
  mutate(slope_val = (`6.26471428571429` - `5.765`) / (6.26471428571429 - 5.765) ) %>% 
  mutate(genus = fct_reorder(.f = genus, .x = slope_val, .fun = mean, .desc = T)) %>% 
  mutate(genus = fct_relevel(genus, "Other", after = 0)) #set others to end
```

```{r}
slope_gen %>%
  group_by(genus) %>% 
  select(slope_val) %>% 
  brms_summary()
```

Calculate how proportion of distribution \> 0

```{r}
dat_above0 <- slope_gen %>%
  group_by(genus) %>% 
  summarize(above_0 = above_0(slope_val)) %>% 
  mutate(above_0 = paste0(round(above_0*100,0),"%")) %>% 
   mutate(above_0 = ifelse(above_0 == "0%", "<1%", above_0))
```

### Plot slopes

```{r}
plot_slope_gen<- slope_gen %>%
  ggplot(aes(y = genus, 
             x = slope_val))+
  geom_density_ridges_gradient(aes(fill = genus))+
  geom_vline(xintercept = 0, linetype = "11")+
  geom_text(data = dat_above0, aes(x = 0.1, label = above_0), hjust = 0, vjust = -0.5)+
  labs(x = expression(Delta~"% cover"~yr^-1~DHW^-1), y = NULL)+
  scale_fill_manual(values = cols_genera, name = NULL)+
  theme_andi()+
  theme(legend.position = "none")

plot_slope_gen

ggsave(filename = "plot_slope_gen.pdf",
       plot = plot_slope_gen, 
       path = here("long_term/plots/"),
       width = 15, height = 15, units  = "cm")
```
