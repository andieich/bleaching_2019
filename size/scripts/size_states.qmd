---
title: "Untitled"
format: html
editor: visual
---

## Packages

```{r}
library(tidyverse)
library(here)
library(brms)
library(tidybayes)
library(patchwork)
library(cmdstanr)
library(ggh4x)
library(fastDummies)
library(ggstance)
library(scales)
library(htmlTable)
```

## Functions

```{r}
# theme for ggplot
theme_andi <- function(){
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(), 
        strip.background = element_blank(),
        axis.line = element_line(colour = "black" ))
}

#Function to predict & plot model data

plot_model <- function(data, model, title = ""){
  
  #define colours
  
  cols_state <-  c("complete mortality" = "#D55E00",
           "growth" = "#009E73",
           "partial mortality" = "#E69F00",
           "no change" = "grey60")
  
  # To plot raw data as ticks, dummy code states (one column per state, 0/1 for true false), => pivor longer to have one column for state and one for true/false, => select only true (=1)
  dat_dummy <-  data %>% 
  select(spec_1, log_area, state) %>% 
  mutate(state = recode(state,
                            "died" = "complete mortality",
                            "grew" = "growth",
                            "shrunk" = "partial mortality")) %>% 
  fastDummies::dummy_cols(select_columns = "state", remove_selected_columns = T) %>% 
  pivot_longer(3:6, 
               names_to = "state", 
               values_to = "dummy") %>% 
  mutate(state = gsub("state_","",state)) %>% 
  filter(dummy != 0) %>% 
    mutate(area = exp(log_area)-1)
  
#predict data with model along sequence of area
dat_pred <- model %>% 
  epred_draws(newdata = expand_grid(
    log_area = seq(0, 7.3, length = 200),
    site = unique(data$site)), 
    re_formula = NA)


#summarise predictions
dat_predS <- dat_pred %>% 
  group_by(log_area, site, .category) %>% 
  summarise(median = median(.epred, na.rm = T),
            l95 = quantile(.epred, 0.025, na.rm = T),
            u95 = quantile(.epred, 0.975, na.rm = T),
            
            l90 = quantile(.epred, 0.05, na.rm = T),
            u90 = quantile(.epred, 0.95, na.rm = T),
            
            l80 = quantile(.epred, 0.1, na.rm = T),
            u80 = quantile(.epred, 0.9, na.rm = T),
            
            ) %>% 
  ungroup() %>% 
    mutate(area = exp(log_area)-1)

x_seq <- log(c(0, 2,  10, 50, 250, 1000)+1)
x_seq_trans <- round(exp(x_seq)-1,0)

#and plot
plot <- dat_predS %>%
  mutate(.category = recode(.category,
                            "died" = "complete mortality",
                            "grew" = "growth",
                            "shrunk" = "partial mortality")) %>% 
  ggplot(aes(x = log_area))+
  geom_ribbon(aes(x = log_area, ymin = l95, ymax = u95, fill = .category), alpha = .2)+
  geom_ribbon(aes(x = log_area, ymin = l90, ymax = u90, fill = .category), alpha = .2)+
  geom_ribbon(aes(x = log_area, ymin = l80, ymax = u80, fill = .category), alpha = .2)+
  geom_line(aes(y = median, col = .category))+
  geom_point(data = dat_dummy, 
             aes(y = dummy + 0.05, 
                 col = state), 
             shape = "|", 
             stroke = 0.1,
             alpha = 0.5,
             position = position_dodgev(height = 0.11))+
  scale_colour_manual(values = cols_state, name = NULL)+
  scale_fill_manual(values = cols_state, name = NULL)+
  facet_wrap2(~site, axes = "all") +
  scale_y_continuous(name="Probability", breaks =seq(0, 1, 0.2))+
  scale_x_continuous(breaks = x_seq, 
                     labels = x_seq_trans)+
  labs(y = "Probability", x = expression("Colony area"~cm^2),
       title = title)+
  theme_andi()+
  theme(legend.position = "bottom",
        plot.title = element_text(face = "bold", hjust = 0.5))#

print(plot)

exp <- list("plot" = plot, "data" = dat_predS, "data_raw" = dat_pred)

return(exp)

}
```

## Data

### Read & setup data

Use log(1 + area) not log to keep values positive

```{r}
dat_state <- read.csv(here("size/data/dat_state.csv")) %>% 
  filter(state != "born") %>% 
  mutate(log_area = log(1+area_1)) %>% 
  mutate(site = recode(site, 
                       "HAA" = "Ha'apiti",
                       "E2B" = "Piha'ena")) %>% 
  separate(genet_ID, into = c("site2", "quadrat", "rep")) %>% 
  select(-site2)
```

## Models

### 2016-2018

```{r}
m_state_16_18 <- brm(state ~  s(log_area, by = site, k = 4) + (1|quadrat), 
                     data = dat_state %>% 
                       filter(comparison == "2016_2018"),
          family = categorical(link = "logit", refcat = NULL),
          iter = 4000,
          warmup = 2000,
          file = here("size/models/m_state_16_18"),
          chains = 4,
          cores = 4,
          seed = 123,
          threads = threading(2, static = T),
          control = list(adapt_delta = 0.99, 
                               max_treedepth = 20),
          backend = "cmdstanr")

summary(m_state_16_18)
#plot(m_state_16_18)
pp_check(m_state_16_18, ndraws = 100)

```

### 2018 -2020

```{r}
m_state_18_20 <- brm(state ~  s(log_area, by = site, k = 4) + (1|quadrat), 
                     data = dat_state %>% 
                       filter(comparison == "2018_2020"),
          family = categorical(link = "logit", refcat = NULL),
          iter = 4000,
          warmup = 2000,
          file = here("size/models/m_state_18_20"),
          chains = 4,
          cores = 4,
          seed = 123,
          threads = threading(2, static = T),
          control = list(adapt_delta = 0.99, 
                               max_treedepth = 20),
          backend = "cmdstanr")


summary(m_state_18_20)
#plot(m_state_18_20)
pp_check(m_state_18_20, ndraws = 100)
```

### 2020-2022

```{r}
m_state_20_22 <- brm(state ~  s(log_area, by = site, k = 4) + (1|quadrat), 
                     data = dat_state %>% 
                       filter(comparison == "2020_2022"),
          family = categorical(link = "logit", refcat = NULL),
          iter = 4000,
          warmup = 2000,
          file = here("size/models/m_state_20_22"),
          chains = 4,
          cores = 4,
          threads = threading(2, static = T),
          seed = 123,
          control = list(adapt_delta = 0.99, 
                               max_treedepth = 20),
          backend = "cmdstanr")


summary(m_state_20_22)

#plot(m_state_20_22)
pp_check(m_state_20_22, ndraws = 100)
```

## Plots

Predict and plot data

```{r}
plot_states_before <- plot_model(data = dat_state %>% 
                       filter(comparison == "2016_2018"), 
           model = m_state_16_18, 
           title = "2016 - 2018")$plot +
  theme(legend.position = "none")

plot_states_during <- plot_model(data = dat_state %>% 
                       filter(comparison == "2018_2020"), 
           model = m_state_18_20, 
           title = "2018 - 2020")$plot +
  theme(legend.position = "none")

plot_states_after <- plot_model(data = dat_state %>% 
                       filter(comparison == "2020_2022"), 
           model = m_state_20_22, 
           title = "2020 - 2022")$plot

```

Combine plots

```{r}
plot_states = plot_states_before/plot_states_during/plot_states_after
plot_states
```

Save plots

```{r}
ggsave(filename = "plot_states.pdf",
       plot = plot_states, 
       path = here("size/plots"),
       width = 30, height = 30, units = "cm")
```

Median sizes for 50% mortality

```{r}
pred_states_before <- plot_model(data = dat_state %>% 
                       filter(comparison == "2016_2018"), 
           model = m_state_16_18, 
           title = "2016 - 2018")$data %>% 
  mutate(comparison = "before")

pred_states_during <- plot_model(data = dat_state %>% 
                       filter(comparison == "2018_2020"), 
           model = m_state_18_20, 
           title = "2018 - 2020")$data %>% 
  mutate(comparison = "during")

pred_states_after <- plot_model(data = dat_state %>% 
                       filter(comparison == "2020_2022"), 
           model = m_state_20_22, 
           title = "2020 - 2022")$data %>% 
  mutate(comparison = "after")


pred_states <- bind_rows(pred_states_before, 
                         pred_states_during,
                         pred_states_after)
pred_states %>% 
  filter(.category  %in% c("died", "shrunk")) %>% 
  filter(site == "Piha'ena" & .category =="died" & comparison == "after" & area > 20 |
           site == "Piha'ena" & .category =="died" & comparison != "after"|
           site == "Piha'ena" & .category =="shrunk"|
           site == "Ha'apiti") %>% 
  mutate(diff = abs(0.5 - median)) %>% 
  group_by(.category, comparison, site) %>% 
  slice_min(diff) %>% 
  select(site, .category, comparison, diff, area) %>% 
  arrange(site, .category, comparison) %>% 
  filter(diff < 0.01) %>% 
  select(-diff) %>% 
  mutate(area = round(area, 0),
         .category = recode(.category, 
                            "died" = "complete mortality",
                            "shrunk" = "partial mortality"),
         comparison = factor(comparison),         ,
         comparison = fct_relevel(comparison, c("before", "during", "after")),
         comparison = recode(comparison, 
                            "before" = "2016 - 2018",
                            "during" = "2018 - 2020",
                            "after" = "2020 - 2022")
        ) %>% 
  rename(fate = .category) %>% 
  arrange(site,comparison) %>% 
  pivot_wider(names_from = comparison, values_from = area) %>% 
  htmlTable(rnames = FALSE)
```
