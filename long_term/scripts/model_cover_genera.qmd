---
title: "Model change per genera"
format: html
editor: visual
---

## Libraries & Functions

```{r}
library(tidyverse)
library(here)
library(RColorBrewer)
library(brms)
library(tidybayes)
library(patchwork)
library(bayesplot)
library(ggragged)
library(ggridges)
library(janitor)

# check how much of distribution is above 0
above_0 <- function(x){
  length(which(x > 0))/length(x)
}

#get summary
brms_summary <- function(x) {
      posterior::summarise_draws(x, "mean", "sd",  ~quantile(.x, probs = c(0.025, 0.975)))
}

#make colours less intense
make_pastel <- function(cols, n = 0.4){
  names <- names(cols)
  cols <- col2rgb(cols)
  # transform to HSV space
  cols <- rgb2hsv(cols)
  cols <- hsv(cols[1,], cols[2,]*n, cols[3,])
  names(cols) <- names
  return(cols)
}

# theme for ggplots
theme_andi <- function(){
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(), 
        strip.background = element_blank(),
        axis.line = element_line(colour = "black" ))
}



# predict data from model to calculate difference in coral cover between two years
predict_before_after <- function(.model, .data, .get_summary = FALSE, ...){ 
  
  # Get a list of quoted dots
  group_vars <- enquos(...)  
  
  # get years 
  years <-  .data$year %>% unique()
  
  # check if only 2 year in data
  if(length(years) != 2){stop(paste("Only two years allowed but", length(years != 2), "provided"))}
  
  
  year_1 <- sym(as.character(years[1]))
  year_2 <- sym(as.character(years[2]))
  
  #make new df
  new_data <- .data %>% 
  dplyr::select(!!!group_vars, year) %>% 
  distinct() %>% 
  mutate(row = 1:n())

  # predict data

  post_pred <- fitted(.model,
                      newdata = new_data,
                      summary = F) %>%
    # convert the results to a data frame
    data.frame() %>%
    # rename the columns
    set_names(pull(new_data, row)) %>%
    # add a numeric index for the MCMC draws
    mutate(draw = 1:n()) %>%
    # convert to the long format
    pivot_longer(-draw) %>%
    # convert the row column from the character format to the numeric format
    mutate(row = as.double(name)) %>%
    # join the nd predictor grid to the output
    left_join(new_data, by = "row") %>%
    # drop two of the columns which are now unnecessary
     dplyr::select(-name, -row) %>%
    # convert to a wider format so we can compute the contrast
    pivot_wider(names_from = year, values_from = value) %>%
    # compute the ATE contrast
     mutate(tau = !!year_2 - !!year_1) %>%
    # # compute the average ATE value within each MCMC draw
      group_by(draw, !!!group_vars) %>%
    summarise(ate = mean(tau)) %>%
    # # remove the draw index column
     ungroup() %>%
     dplyr::select(ate, !!!group_vars)
  
  if(.get_summary){
    
    post_pred <- post_pred %>%
      group_by(!!!group_vars) %>%
      brms_summary()
  }

  return(post_pred)

}

# predict data from model to calculate relative difference in coral cover between two years
predict_before_after_rel <- function(.model, .data, .get_summary = FALSE, ...){ 
  
  # Get a list of quoted dots
  group_vars <- enquos(...)  
  
  # get years 
  years <-  .data$year %>% unique()
  
  # check if only 2 year in data
  if(length(years) != 2){stop(paste("Only two years allowed but", length(years != 2), "provided"))}
  
  
  year_1 <- sym(as.character(years[1]))
  year_2 <- sym(as.character(years[2]))
  
  #make new df
  new_data <- .data %>% 
    dplyr::select(!!!group_vars, year) %>% 
    distinct() %>% 
    mutate(row = 1:n())
  
  # predict data
  
  post_pred <- fitted(.model,
                      newdata = new_data,
                      summary = F) %>%
    # convert the results to a data frame
    data.frame() %>%
    # rename the columns
    set_names(pull(new_data, row)) %>%
    # add a numeric index for the MCMC draws
    mutate(draw = 1:n()) %>%
    # convert to the long format
    pivot_longer(-draw) %>%
    # convert the row column from the character format to the numeric format
    mutate(row = as.double(name)) %>%
    # join the nd predictor grid to the output
    left_join(new_data, by = "row") %>%
    # drop two of the columns which are now unnecessary
    dplyr::select(-name, -row) %>%
    # convert to a wider format so we can compute the contrast
    pivot_wider(names_from = year, values_from = value) %>%
    # compute the ATE contrast
    mutate(rel_change = (!!year_2 - !!year_1) / !!year_1) %>%
    # # compute the average ATE value within each MCMC draw
    group_by(draw, !!!group_vars) %>%
    summarise(rel_change = mean(rel_change)) %>%
    # # remove the draw index column
    ungroup() %>%
    dplyr::select(rel_change, !!!group_vars)
  
  if(.get_summary){
    
    post_pred <- post_pred %>%
      group_by(!!!group_vars) %>%
      brms_summary()
  }
  
  return(post_pred)
  
}
```

## Get data

```{r}
dat <- readRDS(here("long_term/data/clean/clean_MooreaMPA.rds"))
dat_meta <- read.csv(here("long_term/data/clean/moorea_mpa_site_metadata.csv"))
```

-   only outer slope, after 2018

```{r}
dat_c <- dat %>% 
  filter(benthic_group == "coral", habitat == "Outer slope", year > 2018)
```

Mean cover in 2019

```{r}
dat_c %>% 
  group_by(year, marine_area, substrate) %>% 
  summarise(proportion = mean(proportion)) %>%  #mean coral cover per site 
  group_by(year, substrate) %>% 
  summarise(proportion = mean(proportion) %>% 
              round(2)) %>% 
  pivot_wider(names_from = year, values_from = proportion) %>% 
  janitor::clean_names() %>% 
  arrange(-x2019)
  
```

variability

```{r}
dat_c %>% 
  group_by(year, marine_area, substrate) %>% 
  mutate(proportion = ifelse(proportion > 0, 1, 0)) %>% 
  summarise(proportion = sum(proportion)) %>%  #mean coral cover per site 
  group_by(year, substrate) %>% 
  summarise(proportion = sum(proportion)) %>% 
  pivot_wider(names_from = year, values_from = proportion) %>% 
  janitor::clean_names() %>% 
  arrange(-x2019)
```

store in variable

```{r}
top_3_corals <- c("Pocillopora",
                  "Montipora",
                  "Acropora")
```

dump into others, re-calculate cover

```{r}
dat_c <- dat_c %>% 
    left_join(dat_meta, by = "marine_area") %>% 
  mutate(genus = ifelse(substrate %in% top_3_corals, substrate, "Other")) %>% 
  dplyr::select(-substrate) %>% 
  group_by(across(c(-proportion))) %>% 
  summarise(proportion = sum(proportion, na.rm = T)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = genus, values_from = proportion, values_fill = 0) %>% 
  dplyr::select(-benthic_group, -habitat) %>% 
  pivot_longer(cols = 10:ncol(.),names_to = "genus", values_to = "proportion") %>% 
  mutate(genus = fct_relevel(genus, "Other", after = Inf)) #set others to end
```

Plot to see what model will do

```{r}
cols_genera <- c(brewer.pal(11, "Set3")[c(1,3,5)], "grey70")#last = "Other" to frey

names(cols_genera) <- c(top_3_corals, "Other")

plot_coral_cover <- dat_c %>% 
  group_by(across(c(-proportion, -transect))) %>%  
  summarise(cover_perc = mean(proportion*100, na.rm = T)) %>% 
  ungroup() %>% 
   mutate(coast = factor(coast, levels = c("West", "North", "East"))) %>% 
  ggplot()+
  geom_area(aes(fill = genus, x = as.Date(date), y = cover_perc))+
  scale_fill_manual(values = cols_genera)+
  guides(fill=guide_legend(title="Genus"))+
  geom_vline(aes(xintercept = as.Date(date)), col = "white", linewidth = 0.1)+
  scale_x_date(breaks = "2 years", date_labels = "%y")+
  labs(x = "Year", y = "Benthic cover (%)")+
  facet_ragged_cols(vars(marine_area), vars(coast))+
  theme_minimal()+
  theme(legend.position = "bottom", 
        axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.ticks = element_line(colour = "black", size = 0.2),
        panel.border = element_rect(fill=NA));plot_coral_cover
```

## Model Delta

### Get data

Check always 3 reps

```{r}
dat_c %>% 
  group_by(marine_area, year, genus) %>% 
  summarise(n = n()) %>% 
  filter(n!=3)
#all good
```

Get DHW data at to data. Names of sites differ and needs to be aligned

```{r}
dat_genus_delta <- dat_c 

dat_dhw <- read.csv(here("dhw/data/dat_sites_maxdhw_mur.csv"))


sites_1 <- unique(dat_genus_delta$marine_area)
sites_2 <- unique(dat_dhw$site)

sites_1[which(!sites_1 %in% sites_2)]
sites_2[which(!sites_2 %in% sites_1)]

# rename dat_coral_delta sites

dat_genus_delta <- dat_genus_delta %>% 
  mutate(marine_area = case_when(marine_area == "Entre 2 baies" ~  "Entre 2 baies",
                                 marine_area == "Haapiti" ~  "Ha'apiti",
                                 marine_area == "Maatea" ~  "Ma'atea",
                                 marine_area == "Pihaena" ~ "Piha'ena",
                                 marine_area == "Temae" ~ "Tema'e",
                          .default = marine_area)) 

dat_dhw <- dat_dhw %>% 
  mutate(site = ifelse(site == "Entre 2 baies", "Entre 2 baies", site ))

dat_genus_delta <- dat_genus_delta %>% 
  dplyr::select(-coast) %>% 
  left_join(dat_dhw, by = c("marine_area" = "site")) 
```

-   25 m every 50 cm per transect =\> 50 points
-   remove "Other", mix of genera, no common response expecetd

```{r}
dat_genus_delta <- dat_genus_delta %>% 
  mutate(counts = as.integer(proportion * 50)) %>% 
  filter(genus != "Other") %>% 
  droplevels()
```

Cover in 2019

```{r}
dat_genus_delta %>%
  filter(year == 2019) %>% 
  group_by(genus) %>%
  mutate(perc = 100*counts/100) %>% 
  summarise(
    mean = mean(perc),
    sd = sd(perc),
    n = n(),
    se = round(sd / sqrt(n), 2)
  ) %>% 
  arrange(desc(mean)) %>% 
  mutate(across(where(is.numeric), round, 1))
```

### Models

`normal(0, 1)` according to loo compare better than `normal(0, 5)` and `normal(0, 10)`

```{r}
m_ccover_genus<- brm(counts|trials(50) ~ marine_area*factor(year)*genus + (1|marine_area),
                     data = dat_genus_delta,
                     family = binomial(),
                     iter = 4000,
                      prior = c(prior(normal(0, 1), class = b),
                                prior(normal(0, 1), class = Intercept)),
                     warmup = 2000,
                     chains = 4,
                     cores = 4,
                     threads = threading(2, static = T),
                     control = list(adapt_delta = 0.99),
                     seed = 123,
                     file = here("long_term/models/m_cover_genus"),
                     backend = "cmdstanr") 
```

```{r}
summary(m_ccover_genus)#Rhat ok
pp_check(m_ccover_genus, ndraws = 100)
bayes_R2(m_ccover_genus)#0.89
```

Get predicted draws

```{r}
#make new df
new_data <- dat_genus_delta %>% 
  droplevels() %>% 
  dplyr::select(marine_area, genus, coast, year) %>% 
  distinct()

post_pred <- epred_draws(m_ccover_genus,
                    newdata = new_data) %>%
  ungroup() %>% 
  dplyr::select(.draw, marine_area, genus, coast, year, .epred) %>% 
  pivot_wider(names_from = year, values_from = .epred) %>% 
  clean_names() %>% 
  mutate(perc_2019 = 100*(x2019/50),
         perc_2020 = 100*(x2020/50),
         perc_2021 = 100*(x2021/50),
         perc_2022 = 100*(x2022/50),
         perc_2023 = 100*(x2023/50)
         ) %>% 
  mutate(delta_2020 = 100*perc_2020/perc_2019,
         delta_2021 = 100*perc_2021/perc_2019,
         delta_2022 = 100*perc_2022/perc_2019,
         delta_2023 = 100*perc_2023/perc_2019) %>%
  ungroup() %>%
  dplyr::select(marine_area, genus, coast, delta_2020, delta_2021, delta_2022, delta_2023) %>% 
  pivot_longer(delta_2020:delta_2023, names_to = "year", values_to = "percent") %>% 
  mutate(year = substr(year, 7, 10) %>% 
           as.numeric())
```

Summarise predictions

```{r}
post_predS <- post_pred %>% 
  bind_rows(expand_grid(coast = unique(post_pred$coast),
                       genus = unique(post_pred$genus),
                       year = 2019,
                       percent = 100)) %>% 
  group_by(year, coast, genus) %>% 
  summarise(median = median(percent),
            l_80 = quantile(percent, probs = (1-0.80)/2),
            u_80 = quantile(percent, probs = 1-(1-0.80)/2),
            l_95 = quantile(percent, 0.025, na.rm = T),
            u_95 = quantile(percent, 0.975, na.rm = T),
      )

col_coast = c("West" = "#0A9F9DFF", 
              "North" = "#CEB175FF", 
              "East" = "#E54E21FF")



plot_change_cover_gen <- post_predS %>%
    mutate(coast = fct_rev(coast)) %>% 
    ggplot(aes(x = year, col = coast))+
    geom_hline(yintercept = c(100), col = "grey", linetype = "11")+
  geom_line(aes(y = median), position = position_dodge(width = .1))+
  geom_errorbar(aes(ymin = l_95, ymax = u_95),width = 0, linewidth = .5, position = position_dodge(width = .1))+
  geom_errorbar(aes(ymin = l_80, ymax = u_80),width = 0, linewidth = .8, position = position_dodge(width = .1))+
  facet_wrap(~fct_relevel(genus, "Pocillopora", "Montipora", "Acropora"), ncol = 1, scales = "free")+
    scale_colour_manual(values = col_coast, name = NULL)+
  geom_point(aes(y = median), position = position_dodge(width = .1))+
    labs( y = expression(Delta~"Cover (%)"), x = NULL)+
    theme_andi()+
    theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        plot.title = element_text(hjust = 0.5, face="bold"),
        strip.text = element_text(face="italic"),
        legend.position = "bottom")

plot_change_cover_gen
```

```{r}
ggsave(filename = "plot_change_cover_gen.pdf",
       plot = plot_change_cover_gen,
       path = here("long_term/plots/"),
       width = 17, height = 14, units  = "cm")
```

```{r}
post_predS %>% 
  filter(genus == "Pocillopora", year > 2021, coast == "North")
```

```{r}
post_predS %>% 
  filter(genus == "Acropora", year >= 2021, coast == "North") 
```

```{r}
post_predS %>% 
  filter(genus == "Acropora", year >= 2021, coast == "East") 
```

```{r}
post_predS %>% 
  filter(genus == "Acropora", year >= 2021, coast == "West") 
```

```{r}
post_predS %>% 
  filter(genus == "Montipora", year > 2019) %>% 
  dplyr::select(year, coast, median) %>% 
  pivot_wider(names_from = year, values_from = median)
```

## DHW in 2019

### Model

`normal(0, 10)` according to loo compare better than `normal(0, 5)` and `normal(0, 1)`

```{r}
m_ccover_genus_19_dhw <- brm(
  counts | trials(50) ~ max_dhw * genus * factor(year) +
    (1 + factor(year) | marine_area),
  data = dat_genus_delta %>%
    filter(year %in% 2019:2020),
  family = binomial(),
  iter = 4000,
  warmup = 2000,
  prior = c(prior(normal(0, 10), class = b), prior(normal(0, 10), class = Intercept)),
  chains = 4,
  cores = 4,
  threads = threading(2, static = T),
  seed = 123,
  file = here("long_term/models/m_ccover_genus_19_dhw"),
  backend = "cmdstanr"
)
```

### Checks

```{r}
summary(m_ccover_genus_19_dhw)#no div trans but max treedepth warning. Rhat ok
pp_check(m_ccover_genus_19_dhw, ndraws = 100)#good
bayes_R2(m_ccover_genus_19_dhw)#0.85
```

### Line plot

Predict delta for each genus along sequence of max_DHW values

-   To illustrate that more raw data is considered, calculate all possible combinations additionally

```{r}
new_data_dhw_gen <- expand_grid(max_dhw = seq(min(dat_genus_delta$max_dhw)-0.1, 
                                     max(dat_genus_delta$max_dhw)+0.1, 
                                     length = 100),
                            genus = unique(dat_genus_delta$genus),
                            year = 2019:2020)

pred_dhw_gen <-  epred_draws(m_ccover_genus_19_dhw,
                             newdata = new_data_dhw_gen,
                             re_formula = NA) %>%
  ungroup() %>%
  dplyr::select(max_dhw, .draw, .epred, year, genus) %>%
  pivot_wider(names_from = year, values_from = .epred) %>%
  mutate(delta =  (`2020`- `2019`)/`2019`)

pred_dhw_genS <- pred_dhw_gen %>% 
  group_by(max_dhw, genus) %>% 
  summarise(median = median(delta, na.rm = T),
            l95 = quantile(delta, 0.025, na.rm = T),
            u95 = quantile(delta, 0.975, na.rm = T),
            
            l80 = quantile(delta, 0.1, na.rm = T),
            u80 = quantile(delta, 0.9, na.rm = T),
            
            l60 = quantile(delta, 0.2, na.rm = T),
            u60 = quantile(delta, 0.8, na.rm = T)) %>% 
  ungroup()

dat_genus_deltaS <- dat_genus_delta %>% 
  dplyr::select(marine_area, proportion, year, coast, max_dhw, genus) %>% 
  filter(year %in% c(2019:2020)) %>% 
  pivot_wider(names_from = year, values_from = proportion, values_fn = mean) %>% 
  mutate(delta =  (`2020`- `2019`)/`2019`)


plot_dhw <- pred_dhw_genS %>%
  mutate(genus = fct_rev(genus)) %>% 
  ggplot(aes(x = max_dhw))+
  geom_hline(yintercept = 0, linetype = "11", col = "grey")+
  geom_ribbon(aes(ymin = l95*100, ymax = u95*100, fill = genus), alpha = .3)+
   geom_ribbon(aes(ymin = l80*100, ymax = u80*100, fill = genus), alpha = .3)+
   geom_ribbon(aes(ymin = l60*100, ymax = u60*100, fill = genus), alpha = .3)+
  geom_line(aes(y = median*100, col = genus), linewidth = 1, show.legend = F)+
  geom_point(data = dat_genus_deltaS, aes(x = max_dhw, y = delta*100, fill = genus), 
             size = 2.5, shape = 21, col = "white", show.legend = F)+
  scale_colour_manual(values = cols_genera, name = NULL)+
  scale_fill_manual(values = cols_genera, name = NULL)+
  facet_wrap(~genus, scales = "free_y", ncol = 1)+
  labs(y = expression(Delta~"Cover (%"~yr^-1*")"), x = expression(AHS[max]), tag = "A")+
  guides(fill=guide_legend(title="Coast"))+
  theme_andi()+
  theme(legend.position = "none",
        plot.title = element_text(face = "bold", hjust = 0.5),
        panel.background = element_rect(colour = "black",  fill='transparent'))


plot_dhw
```

### Slope

Assuming linear relationship over whole course of max_DHW calculate slope between lowest max_DHW value and highest. Calculate this slope for each genus

```{r}
slope_gen <- epred_draws(m_ccover_genus_19_dhw, 
                         re_formula = NA,
                         newdata = 
  expand_grid(max_dhw = c(min(dat_genus_delta$max_dhw),
                             max(dat_genus_delta$max_dhw)),
              year = 2019:2020,
              genus = dat_genus_delta$genus %>% unique())) %>% 
  ungroup() %>% 
  dplyr::select(max_dhw, year, .epred, .draw, genus) %>% 
  pivot_wider(names_from = year, values_from = .epred) %>% 
  mutate(delta =  (`2020`- `2019`)/`2019`) %>% 
  dplyr::select(delta, max_dhw, .draw, genus) %>% 
  pivot_wider(names_from = max_dhw, values_from = delta) %>% 
  mutate(slope_val = (`6.26471428571429` - `5.765`) / (6.26471428571429 - 5.765) ) %>% 
  mutate(genus = fct_reorder(.f = genus, .x = slope_val, .fun = mean, .desc = T))
```

```{r}
slope_gen %>%
  group_by(genus) %>% 
  dplyr::select(slope_val) %>% 
  brms_summary()
```

Calculate how proportion of distribution \> 0

```{r}
dat_above0 <- slope_gen %>%
  group_by(genus) %>% 
  summarize(above_0 = above_0(slope_val)) %>% 
  mutate(above_0 = paste0(round(above_0*100,0),"%")) %>% 
   mutate(above_0 = ifelse(above_0 == "0%", "<1%", above_0))
```

### Plot slopes

```{r}
plot_slope_gen<- slope_gen %>%
  ggplot(aes(y = genus, 
             x = slope_val*100))+
  geom_density_ridges_gradient(aes(fill = genus))+
  geom_vline(xintercept = 0, linetype = "11")+
  geom_text(data = dat_above0, aes(x = 6, label = above_0), hjust = 0, vjust = -2)+
  labs(x = expression(Delta~"% cover"~AHS[max]^-1), y = "Density", tag = "B")+
  scale_fill_manual(values = cols_genera, name = NULL)+
  coord_cartesian(xlim = c(-300, 200))+
  theme_andi()+
  theme(legend.position = "none")

plot_slope_gen
```

Combine

```{r}
plot_slope_both_gen <- plot_dhw+plot_slope_gen+ 
  plot_layout(widths = c(2, 1))

plot_slope_both_gen
```

```{r}
ggsave(filename = "plot_slope_both_gen.pdf",
       plot = plot_slope_both_gen, 
       path = here("long_term/plots/"),
       width = 22, height = 16, units  = "cm")
```
