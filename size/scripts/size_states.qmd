---
title: "Untitled"
format: html
editor: visual
---

## Packages

```{r}
library(tidyverse)
library(here)
library(brms)
library(tidybayes)
library(patchwork)
library(cmdstanr)
library(ggh4x)
library(fastDummies)
library(ggstance)
```

## Functions

```{r}
# theme for ggplot
theme_andi <- function(){
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank(), 
        strip.background = element_blank(),
        axis.line = element_line(colour = "black" ))
}

#Function to predict & plot model data

plot_model <- function(data, model, title = ""){
  
  #define colours
  
  cols_state <-  c("complete mortality" = "#D55E00",
           "growth" = "#009E73",
           "partial mortality" = "#E69F00",
           "no change" = "grey60")
  
  # To plot raw data as ticks, dummy code states (one column per state, 0/1 for true false), => pivor longer to have one column for state and one for true/false, => select only true (=1)
  dat_dummy <-  data %>% 
  select(spec_1, log_area, state) %>% 
  mutate(state = recode(state,
                            "died" = "complete mortality",
                            "grew" = "growth",
                            "shrunk" = "partial mortality")) %>% 
  fastDummies::dummy_cols(select_columns = "state", remove_selected_columns = T) %>% 
  pivot_longer(3:6, 
               names_to = "state", 
               values_to = "dummy") %>% 
  mutate(state = gsub("state_","",state)) %>% 
  filter(dummy != 0)
  
#predict data with model along sequence of area
dat_pred <- model %>% 
  epred_draws(newdata = expand_grid(
    log_area = seq(0, 7.2, length = 200),
    site = unique(data$site)))


#summarise predictions
dat_predS <- dat_pred %>% 
  group_by(log_area, site, .category) %>% 
  summarise(median = median(.epred, na.rm = T),
            l95 = quantile(.epred, 0.025, na.rm = T),
            u95 = quantile(.epred, 0.975, na.rm = T),
            
            l90 = quantile(.epred, 0.05, na.rm = T),
            u90 = quantile(.epred, 0.95, na.rm = T),
            
            l80 = quantile(.epred, 0.1, na.rm = T),
            u80 = quantile(.epred, 0.9, na.rm = T),
            
            ) %>% 
  ungroup()

#and plot
plot <- dat_predS %>%
  mutate(.category = recode(.category,
                            "died" = "complete mortality",
                            "grew" = "growth",
                            "shrunk" = "partial mortality")) %>% 
  ggplot(aes(x = log_area))+
  geom_ribbon(aes(x = log_area, ymin = l95, ymax = u95, fill = .category), alpha = .2)+
  geom_ribbon(aes(x = log_area, ymin = l90, ymax = u90, fill = .category), alpha = .2)+
  geom_ribbon(aes(x = log_area, ymin = l80, ymax = u80, fill = .category), alpha = .2)+
  geom_line(aes(y = median, col = .category))+
  geom_point(data = dat_dummy, 
             aes(y = dummy + 0.05, 
                 col = state), 
             shape = "|", 
             stroke = 0.1,
             alpha = 0.5,
             position = position_dodgev(height = 0.11))+
  scale_colour_manual(values = cols_state, name = NULL)+
  scale_fill_manual(values = cols_state, name = NULL)+
  facet_wrap2(~site, axes = "all") +
  scale_y_continuous(name="Probability", breaks =seq(0, 1, 0.2))+
  xlim(0,30)+
  labs(y = "Probability", x = expression("Log 1 + Colony area"~cm^2),
       title = title)+
  theme_minimal()+
  theme_andi()+
  theme(legend.position = "bottom",
        plot.title = element_text(face = "bold", hjust = 0.5))#

print(plot)
return(plot)

}
```

## Data

### Read & setup data

Use log(1 + area) not log to keep values positive

```{r}
dat_state_E2B <- read.csv(here("size/data/dat_state_E2B.csv"))
dat_state_HAA <- read.csv(here("size/data/dat_state_HAA.csv"))


dat_state <- bind_rows(dat_state_E2B, dat_state_HAA) %>% 
  filter(spec_1 == "Pocillopora",
         state != "born") %>% 
  mutate(log_area = log(1+area_1)) %>% 
  mutate(site = recode(site, 
                       "HAA" = "Haapiti",
                       "E2B" = "Pihaena"))
```

## Models

### 2016 - 2018

```{r}
m_state_16_18 <- brm(state ~  s(log_area, by = site, k = 4) + (1|quadrat), 
                     data = dat_state %>% 
                       filter(comparison == "2016_2018"),
          family = categorical(link = "logit", refcat = NULL),
          iter = 4000,
          warmup = 2000,
          file = here("size/models/m_state_16_18"),
          chains = 4,
          cores = 4,
          seed = 123,
          threads = threading(2, static = T),
          control = list(adapt_delta = 0.99, 
                               max_treedepth = 20),
          backend = "cmdstanr")


summary(m_state_16_18)
#plot(m_state_16_18)
pp_check(m_state_16_18, ndraws = 100)

```

### 2018 - 2020

```{r}
m_state_18_20 <- brm(state ~  s(log_area, by = site, k = 4) + (1|quadrat), 
                     data = dat_state %>% 
                       filter(comparison == "2018_2020"),
          family = categorical(link = "logit", refcat = NULL),
          iter = 4000,
          warmup = 2000,
          file = here("size/models/m_state_18_20"),
          chains = 4,
          cores = 4,
          seed = 123,
          threads = threading(2, static = T),
          control = list(adapt_delta = 0.99, 
                               max_treedepth = 20),
          backend = "cmdstanr")


summary(m_state_18_20)#1 div trans
#plot(m_state_18_20)
pp_check(m_state_18_20, ndraws = 100)
```

### 2020- 2022

```{r}
m_state_20_22 <- brm(state ~  s(log_area, by = site, k = 4) + (1|quadrat), 
                     data = dat_state %>% 
                       filter(comparison == "2020_2022"),
          family = categorical(link = "logit", refcat = NULL),
          iter = 4000,
          warmup = 2000,
          file = here("size/models/m_state_20_22"),
          chains = 4,
          cores = 4,
          threads = threading(2, static = T),
          seed = 123,
          control = list(adapt_delta = 0.99, 
                               max_treedepth = 20),
          backend = "cmdstanr")


summary(m_state_20_22)
#plot(m_state_20_22)
pp_check(m_state_20_22, ndraws = 100)#not too good. Continue as test
```

## Plots

Predict and plot data

```{r}
plot_states_before <- plot_model(data = dat_state %>% 
                       filter(comparison == "2016_2018"), 
           model = m_state_16_18, 
           title = "2016 - 2018") +
  theme(legend.position = "none")

plot_states_during <- plot_model(data = dat_state %>% 
                       filter(comparison == "2018_2020"), 
           model = m_state_18_20, 
           title = "2018 - 2020") +
  theme(legend.position = "none")

plot_states_after <- plot_model(data = dat_state %>% 
                       filter(comparison == "2020_2022"), 
           model = m_state_20_22, 
           title = "2020 - 2022")

```

Combine plots

```{r}
plot_states = plot_states_before/plot_states_during/plot_states_after
plot_states
```

Save plots

```{r}
ggsave(filename = "plot_states.pdf",
       plot = plot_states, 
       path = here("size/plots"),
       width = 30, height = 30, units = "cm")
```

## Recruitment

Get data

```{r}

dat_born <- bind_rows(dat_state_E2B, dat_state_HAA) %>% 
  filter(spec_1 == "Pocillopora",
         state == "born") %>% 
  mutate(site = recode(site, 
                       "HAA" = "Haapiti",
                       "E2B" = "Pihaena")) %>% 
  separate(genet_ID, into = c("site2", "quadrat", "rep")) %>% 
  group_by(comparison, site, quadrat) %>% 
  summarise(n_born = n()) %>% 
  separate(comparison, into = c("before", "year")) %>% 
  select(-before) %>% 
  mutate(year_num = as.numeric(factor(year)))
```

Model

```{r}
m_born <- brm(n_born ~  year_num * site, 
              data = dat_born,
              family = poisson(),
          iter = 4000,
          warmup = 2000,
          file = here("size/models/m_born"),
          chains = 4,
          cores = 4,
          threads = threading(2, static = T),
          seed = 123,
          #control = list(adapt_delta = 0.99, 
          #                     max_treedepth = 20),
          backend = "cmdstanr")
```

Check Model

```{r}
summary(m_born)# good
pp_check(m_born, ndraws = 100)
bayes_R2(m_born)#0.11
```

Predict

```{r}

dat_pred_born <- m_born %>% 
  epred_draws(newdata = expand_grid(
    year_num = seq(1, 3, length = 100),
    site = unique(dat_born$site)))


#summarise predictions
dat_pred_bornS <- dat_pred_born %>% 
  group_by(year_num,site) %>% 
  summarise(median = median(.epred, na.rm = T),
            l95 = quantile(.epred, 0.025, na.rm = T),
            u95 = quantile(.epred, 0.975, na.rm = T),
            
            l90 = quantile(.epred, 0.05, na.rm = T),
            u90 = quantile(.epred, 0.95, na.rm = T),
            
            l80 = quantile(.epred, 0.1, na.rm = T),
            u80 = quantile(.epred, 0.9, na.rm = T),
            
            ) %>% 
  ungroup() %>% 
  mutate(year = year_num*2 + 2016)

```

Plot

```{r}
dat_bornS <-  dat_born %>%  
  group_by(year, site) %>% 
  summarise(mean_n_born = mean(n_born),
            se = sd(n_born, na.rm=T) / sqrt(sum(!is.na(n_born)))) 

col_site = c("Haapiti" = "#0A9F9DFF", 
              "Pihaena" = "#CEB175FF")

  
plot_born <- dat_born %>% 
  ggplot(aes(x = as.numeric(year)))+
  geom_ribbon(data = dat_pred_bornS, aes(ymin = l95, ymax = u95, fill = site), alpha = .2)+
  geom_ribbon(data = dat_pred_bornS, aes(ymin = l90, ymax = u90, fill = site), alpha = .2)+
  geom_ribbon(data = dat_pred_bornS, aes(ymin = l80, ymax = u80, fill = site), alpha = .2)+
  geom_line(data = dat_pred_bornS, aes(y = median, col = site), linewidth = 1.2)+
  geom_point(aes(y = n_born, col = site), position = position_jitter(.2))+
  #geom_errorbar(data = dat_bornS, aes(ymin = mean_n_born - se, ymax = mean_n_born + se, col = site), position = position_dodge(), width = .5, col = "black")+
  #geom_point(data = dat_bornS, aes(y = mean_n_born,  fill = site), size = 2.5, shape = 21, col = "black")+
  labs(y = "# born", x = NULL)+
  scale_colour_manual(values = col_site, name = NULL)+
  scale_fill_manual(values = col_site, name = NULL)+
  scale_x_continuous(breaks = seq(2018, 2022, by = 2))+
  facet_wrap(~site)+
  theme_andi()+
  theme(legend.position = "none")

plot_born

ggsave(filename = "plot_born.pdf",
       plot = plot_born, 
       path = here("size/plots"),
       width = 18, height = 10, units = "cm")
```
